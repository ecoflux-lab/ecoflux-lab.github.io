## 8.2. &nbsp; Recently Added Features

<link rel="stylesheet" href="css/style.css">

This page contains significant features recently added to the data cleaning pipeline - most recent at the top. Details can also be found in the full documentation (updated on this website soon).

**Watch this space for third stage changes coming soon...**

##### *Updated: 10 February 2025*

**New Overwrite feature:**

Sometimes we need to overwrite multiple properties for one or more traces that have already been created e.g. in an include file. The global variables feature allows this, however, once this section becomes long with many trace property tweaks, it can become very hard to troubleshoot, and in these cases having all the information for one trace together is more desirable. 

Instead of using global variables you can duplicate the full trace (`[Trace] ... [End]`), and in your site-specific first stage INI file, put this duplicate *after* the line of code where the include file is called that contains your original trace. Note the additional `Overwrite` property highlighted in yellow:

<img src="images/ini_files/ini_example1a.jpg" alt="INIfiles/OverwriteFeature" width="650"/>

*Location within site-specific INI file to put duplicate trace for overwriting a trace previously defined in an include INI file. In this case, we want to overwrite the `CH4_MIXING_RATIO` trace that was originally defined in `EddyPro_LI7700_FirstStage_include.ini`. Yellow highlighting shows the syntax for the "overwrite" property.*

There are three overwrite options:

* `0` = do not overwrite with this trace. This is the default setting. If you do not include the `Overwrite` parameter, the pipeline assumes this option. If you have a duplicate trace you will get an **error** during cleaning (Example 1):

    <img src="images/ini_files/ini_example1c1.jpg" alt="INIfiles/OverwriteFeatureEx1" width="300"/>

* `1` = overwrite traces having the same variableName and also with `Overwrite = 0` setting. This puts the duplicate data where the original data was, i.e., complete overwrite, first trace gone. Use this setting if you want your duplicate T2 available to use in a later variable such as T3, T4, T5, etc. (Example 2):

    <img src="images/ini_files/ini_example1c2.jpg" alt="INIfiles/OverwriteFeatureEx2" width="600"/>


* `2` = overwrite traces having the same variableName and with `Overwrite = 0` setting. This takes advantage of the "position" of the duplicate trace. Use this setting if you want a later variable such as T3 or T4 available to use in T2.

    <img src="images/ini_files/ini_example1c3.jpg" alt="INIfiles/OverwriteFeatureEx3" width="600"/>

<br>

**New *postEvaluate* property:**

The new `postEvaluate` property can be applied in the first stage. It is executed in the first stage *after* all other cleaning is done, e.g., minMax, calibration, etc.. This is in contrast to the `Evaluate` property which is executed for all traces *before* any other cleaning properties. 

Generally speaking, the order of operations is: `Evaluate` --> `other cleaning (e.g., minMax, calibration)` --> `postEvaluate`. This is ***regardless of the order that they appear*** within `[Trace] ... [End]`. The following series of examples show how the Evaluate and postEvaluate statements work in relation to the other cleaning properties. For each example the input (Original) is an array of ones, and both the "Original" and first-stage "Clean" data are plotted in the result.

**Example 1:** 
Only minMax and calibration, no Evaluate or postEvaluate statements\
<img src="images/ini_files/ini_example1b1.jpg" alt="INIfiles/postEvaluateEx1" width="650"/>

Result: x = 2x [calibrated]\
<img src="images/ini_files/ini_example1b1_fig.jpg" alt="INIfiles/postEvaluateEx1" width="400"/>

<br>

**Example 2:**
Evaluate, minMax and calibration, no postEvaluate statement\
<img src="images/ini_files/ini_example1b2.jpg" alt="INIfiles/postEvaluateEx2" width="650"/>

Result: x = (x - 1)*2 [Evaluate first, then calibrate]\
<img src="images/ini_files/ini_example1b2_fig.jpg" alt="INIfiles/postEvaluateEx2" width="400"/>

<br>


**Example 3:** minMax and calibration, postEvaluate statement, no Evaluate statement\
<img src="images/ini_files/ini_example1b3.jpg" alt="INIfiles/postEvaluateEx3" width="650"/>

Result: x = 2x - 1 [calibrate, then postEvaluate]\
<img src="images/ini_files/ini_example1b3_fig.jpg" alt="INIfiles/postEvaluateEx3" width="400"/>

<br>

**Example 4:** minMax and calibration, both Evaluate and postEvaluate statements\
<img src="images/ini_files/ini_example1b4.jpg" alt="INIfiles/postEvaluateEx4" width="650"/>

Result: x = (x - 1)*2 - 1 [Evaluate, then calibrate, then postEvaluate]\
<img src="images/ini_files/ini_example1b4_fig.jpg" alt="INIfiles/postEvaluateEx4" width="400"/>



<!-- This example shows two simplified traces: (1) `var1` which includes a time shift in the Evaluate statement (this happens first), a unit conversion using the calibration feature, and application of `minMax` bounds (all highlighted in peach); (2) `var2` which takes advantage of the `postEvaluate` statement (highlighted in yellow), to utilize `var1` *after all* cleaning is complete for that trace. 

<img src="images/ini_files/ini_example1b.jpg" alt="INIfiles/postEvaluateFeature" width="650"/>

Note that using an `Evaluate` statement in the `var2` trace instead of `postEvaluate` would result in `var1` being used *after* the time shift, and *before* the calibration and application of minMax bounds.  -->