## 5.4. &nbsp; Full Documentation: Second Stage INI Files 

[XXX In Progress]

<link rel="stylesheet" href="css/style.css"> 

On this page:

- <a href="#div_id_GeneralSecondStage">General outline for creating your second stage INI file</a>
- <a href="#div_id_RunSecondStage">Running second stage cleaning in Matlab</a>
- <a href="#div_id_PropertiesSecondStage">Properties and parameters: second stage INI</a>
- <a href="#div_id_SecondStageFeatures">Second stage main features</a>
- <a href="#div_id_SyntaxRules">Programming syntax rules for first and second stage INI files</a>

<br>

<div id="div_id_GeneralSecondStage">

<hr>

### General outline for creating your second stage INI file

As with the first stage cleaning, if you are doing this for the first time, we recommend that you obtain the simplified template files from the quick-start instructions in section 4 and follow the tutorial. The steps to create your second stage INI are very similar to the first stage:

* Using your duplicated second stage INI file or downloaded template file, rename it using your unique measurement site ID. For example, the first stage INI file for a site with siteID = 'DSM' is named `DSM_FirstStage.ini`.

* Edit second stage INI file adding *just a few variables at a time* (as with the first stage) and then testing, so it’s easy to diagnose errors/typos. Pay attention to the output in your Matlab command window; it is informative and highlights any issues and where they occur. Recall the data cleaning principles previously outlined and make sure your traces align with the second stage principles.

</div>

<br>

<div id="div_id_RunSecondStage">

<hr>

### Running second stage cleaning in Matlab

Once you have added a few variables to the second stage INI, test it using the same Matlab command you used for the first stage cleaning, but entering '2' as the final argument (instead of '1'):
```
fr_automated_cleaning(yearIn,'SITEID',2)
```
Eventually, you can run the first and second stage together, as follows: 
```
fr_automated_cleaning(yearIn,'SITEID',[1 2])
``` 
...but initially this makes it harder to troubleshoot.


</div>

<br>

<div id="div_id_PropertiesSecondStage">

<hr>

### Properties and parameters: second stage INI

*Table 5.2. Second stage INI file properties and parameters.*

| Field      | Description |
| ----------- | ----------- |
| Site_name   | Name of the site. Any text can go here.        |
| SiteID      | This is the name attributed to the site in the database (e.g., DSM or BB). |
| input_path  | This can stay blank. |
| output_path | The local output path.|
| high_level_path | Leave blank:{}. It used to indicate Met/Flux, etc.|
| searchPath  | All traces on this path(s) will be loaded up and available in the SecondStage cleaning. Syntax: use 'auto' or use specific folders to limit or to expand the (example: 'Flux\Clean,Met\Clean,Flags\Clean'). When option 'auto' is used, all the traces created by the FirstStage cleaning will be automatically loaded before the SecondStage cleaning starts. |
|[Trace] | Marks the beginning of a new variable. The section has to end with the keyword <[End]>.|
| variableName | Name of variable for second stage, again following Ameriflux format. The variable with the name created here will show up in the `/Database/yyyy/SITEID/Clean/SecondStage` folder, where `yyyy` is the year that the data is valid for. |
| Evaluate | User defined function.  If no function is applied, default input will just pass the variable from the first stage to the second stage, e.g.,  `Evaluate = 'TKE = TKE;'`.  Use the `calc_avg_trace` function (described above) to average or gap-fill met variables (such as air temperature) with values from secondary measurements or nearby sites (you will need to load these into the first stage before using them in this second stage). See sample file `DSM_SecondStage.ini` for more use cases.|
| title | Descriptive variable name for plots/visualization. |
| units | Units for this current trace, e.g. `'W/m^2'`|

<br>

<div id="div_id_SecondStageFeatures">

<hr>

### Second stage main features

1. Combining multiple sensor measurements into one trace. This can be done in different ways using `calc_avg_trace.m`, which combines two or more traces from the first stage (i.e., already deemed “good” sensor measurements). You can also combine these three methods:
 * Averaging multiple sensors to remove variability;
 * Using one sensor as the best (most accurate value) and using the other sensor(s) only to fill in the missing values. A relationship can be created between the “best” sensor and its “replacement” and that relationship can be applied to the “replacement” values to improve the accuracy;
 * Using sensors from another near-by site to fill in the missing values at the current site.

    Arguments for `calc_avg_trace` function:
    
    | Field | Description | Type |
    | ----- | ----------- | ---- |
    | tv | input the time vector `clean_tv` that has already been created in the first stage cleaning | n/a|
    | data_in | the name of the trace output from stage one, to be filled or "improved" by combining/averaging with another trace or traces | string uppercase |
    | data_fill | the name of the traces used to average/gap-fill "data_in" trace; these "data_fill" traces must have been included in the first stage | integer |
    | avg_period | |

2. As with the first stage, more complex user-defined processing can be applied to the trace using the “Evaluate” option. User written Matlab functions can be called from this statement. Multiple Matlab statements can be called from within the “Evaluate” string. Some rules for formatting apply here (see the DSM SecondStage ini file for details and examples [XXX if we include this]).

</div>

<br>

<div id="div_id_SyntaxRules">

<hr>

#### Programming syntax rules for first and second stage INI files:

```
Some programming rules that you must follow for the first and second stage INI files to be successfully read by the pipeline scripts:

1. We enforce using uppercase for site IDs to avoid problems with running data cleaning on Mac vs. Windows.
2. All traces must be enclosed in [Trace] and [End] blocks.
3. All assignments can be on multiple lines but should be enclosed in single quotes.
4. Comments must begin with a percentage sign (%).
5. All fields must be in Matlab format.
6. All parameter assignments must be to strings in single quotes, or numeric expressions, e.g., threshold_const = 6, threshold_const = [6], variableName = 'Some Name'.
7. For the first stage, the partial path must be included with the inputFileName when you locate the raw data trace in the database. (Using biomet_path function only returns the path: /year/SITEID/measType/)
8. First stage necessary fields are: variableName, inputFileName, measurementType, units, title, and minMax.
9. Second stage necessary fields are: variableName, title, units.
```

</div>